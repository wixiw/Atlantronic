"""autogenerated by genmsg_py from OpponentsList.msg. Do not edit."""
import roslib.message
import struct

import arp_core.msg

class OpponentsList(roslib.message.Message):
  _md5sum = "fb6d38e910e60553c9cb171a1db6d5e2"
  _type = "arp_core/OpponentsList"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Pose[] Opponents
int32 nbOpponents
float64 date
================================================================================
MSG: arp_core/Pose
float64 x
float64 y
float64 theta

float64 vx
float64 vy
float64 vtheta

float64 date
"""
  __slots__ = ['Opponents','nbOpponents','date']
  _slot_types = ['arp_core/Pose[]','int32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       Opponents,nbOpponents,date
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(OpponentsList, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Opponents is None:
        self.Opponents = []
      if self.nbOpponents is None:
        self.nbOpponents = 0
      if self.date is None:
        self.date = 0.
    else:
      self.Opponents = []
      self.nbOpponents = 0
      self.date = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.Opponents)
      buff.write(_struct_I.pack(length))
      for val1 in self.Opponents:
        _x = val1
        buff.write(_struct_7d.pack(_x.x, _x.y, _x.theta, _x.vx, _x.vy, _x.vtheta, _x.date))
      _x = self
      buff.write(_struct_id.pack(_x.nbOpponents, _x.date))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Opponents = []
      for i in range(0, length):
        val1 = arp_core.msg.Pose()
        _x = val1
        start = end
        end += 56
        (_x.x, _x.y, _x.theta, _x.vx, _x.vy, _x.vtheta, _x.date,) = _struct_7d.unpack(str[start:end])
        self.Opponents.append(val1)
      _x = self
      start = end
      end += 12
      (_x.nbOpponents, _x.date,) = _struct_id.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.Opponents)
      buff.write(_struct_I.pack(length))
      for val1 in self.Opponents:
        _x = val1
        buff.write(_struct_7d.pack(_x.x, _x.y, _x.theta, _x.vx, _x.vy, _x.vtheta, _x.date))
      _x = self
      buff.write(_struct_id.pack(_x.nbOpponents, _x.date))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Opponents = []
      for i in range(0, length):
        val1 = arp_core.msg.Pose()
        _x = val1
        start = end
        end += 56
        (_x.x, _x.y, _x.theta, _x.vx, _x.vy, _x.vtheta, _x.date,) = _struct_7d.unpack(str[start:end])
        self.Opponents.append(val1)
      _x = self
      start = end
      end += 12
      (_x.nbOpponents, _x.date,) = _struct_id.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_7d = struct.Struct("<7d")
_struct_id = struct.Struct("<id")
