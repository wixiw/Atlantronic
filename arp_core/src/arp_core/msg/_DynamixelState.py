"""autogenerated by genmsg_py from DynamixelState.msg. Do not edit."""
import roslib.message
import struct


class DynamixelState(roslib.message.Message):
  _md5sum = "c8e270f5a26d322cec3ab28de54417f0"
  _type = "arp_core/DynamixelState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool connected
bool stucked
bool target_reached
float64 position
"""
  __slots__ = ['connected','stucked','target_reached','position']
  _slot_types = ['bool','bool','bool','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       connected,stucked,target_reached,position
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(DynamixelState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.connected is None:
        self.connected = False
      if self.stucked is None:
        self.stucked = False
      if self.target_reached is None:
        self.target_reached = False
      if self.position is None:
        self.position = 0.
    else:
      self.connected = False
      self.stucked = False
      self.target_reached = False
      self.position = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3Bd.pack(_x.connected, _x.stucked, _x.target_reached, _x.position))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.connected, _x.stucked, _x.target_reached, _x.position,) = _struct_3Bd.unpack(str[start:end])
      self.connected = bool(self.connected)
      self.stucked = bool(self.stucked)
      self.target_reached = bool(self.target_reached)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3Bd.pack(_x.connected, _x.stucked, _x.target_reached, _x.position))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.connected, _x.stucked, _x.target_reached, _x.position,) = _struct_3Bd.unpack(str[start:end])
      self.connected = bool(self.connected)
      self.stucked = bool(self.stucked)
      self.target_reached = bool(self.target_reached)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3Bd = struct.Struct("<3Bd")
