"""autogenerated by genmsg_py from MotionTarget.msg. Do not edit."""
import roslib.message
import struct

import arp_core.msg

class MotionTarget(roslib.message.Message):
  _md5sum = "299baeae04a9fb0331ff4a4b63702e8f"
  _type = "arp_core/MotionTarget"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Pose target
bool isTranslation
================================================================================
MSG: arp_core/Pose
float64 x
float64 y
float64 theta

float64 vx
float64 vy
float64 vtheta

float64 date
"""
  __slots__ = ['target','isTranslation']
  _slot_types = ['arp_core/Pose','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       target,isTranslation
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(MotionTarget, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.target is None:
        self.target = arp_core.msg.Pose()
      if self.isTranslation is None:
        self.isTranslation = False
    else:
      self.target = arp_core.msg.Pose()
      self.isTranslation = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_7dB.pack(_x.target.x, _x.target.y, _x.target.theta, _x.target.vx, _x.target.vy, _x.target.vtheta, _x.target.date, _x.isTranslation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.target is None:
        self.target = arp_core.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.target.x, _x.target.y, _x.target.theta, _x.target.vx, _x.target.vy, _x.target.vtheta, _x.target.date, _x.isTranslation,) = _struct_7dB.unpack(str[start:end])
      self.isTranslation = bool(self.isTranslation)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_7dB.pack(_x.target.x, _x.target.y, _x.target.theta, _x.target.vx, _x.target.vy, _x.target.vtheta, _x.target.date, _x.isTranslation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.target is None:
        self.target = arp_core.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.target.x, _x.target.y, _x.target.theta, _x.target.vx, _x.target.vy, _x.target.vtheta, _x.target.date, _x.isTranslation,) = _struct_7dB.unpack(str[start:end])
      self.isTranslation = bool(self.isTranslation)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_7dB = struct.Struct("<7dB")
