/* Auto-generated by genmsg_cpp for file /opt/ros/ard/arp_core/msg/Odo.msg */
#ifndef ARP_CORE_MESSAGE_ODO_H
#define ARP_CORE_MESSAGE_ODO_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace arp_core
{
template <class ContainerAllocator>
struct Odo_ : public ros::Message
{
  typedef Odo_<ContainerAllocator> Type;

  Odo_()
  : odo_left(0.0)
  , odo_right(0.0)
  {
  }

  Odo_(const ContainerAllocator& _alloc)
  : odo_left(0.0)
  , odo_right(0.0)
  {
  }

  typedef double _odo_left_type;
  double odo_left;

  typedef double _odo_right_type;
  double odo_right;


private:
  static const char* __s_getDataType_() { return "arp_core/Odo"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "90d73fc2677028867971b4ef8a5770ad"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 odo_left\n\
float64 odo_right\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, odo_left);
    ros::serialization::serialize(stream, odo_right);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, odo_left);
    ros::serialization::deserialize(stream, odo_right);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(odo_left);
    size += ros::serialization::serializationLength(odo_right);
    return size;
  }

  typedef boost::shared_ptr< ::arp_core::Odo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arp_core::Odo_<ContainerAllocator>  const> ConstPtr;
}; // struct Odo
typedef  ::arp_core::Odo_<std::allocator<void> > Odo;

typedef boost::shared_ptr< ::arp_core::Odo> OdoPtr;
typedef boost::shared_ptr< ::arp_core::Odo const> OdoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arp_core::Odo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arp_core::Odo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arp_core

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::arp_core::Odo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "90d73fc2677028867971b4ef8a5770ad";
  }

  static const char* value(const  ::arp_core::Odo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x90d73fc267702886ULL;
  static const uint64_t static_value2 = 0x7971b4ef8a5770adULL;
};

template<class ContainerAllocator>
struct DataType< ::arp_core::Odo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arp_core/Odo";
  }

  static const char* value(const  ::arp_core::Odo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arp_core::Odo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 odo_left\n\
float64 odo_right\n\
\n\
";
  }

  static const char* value(const  ::arp_core::Odo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arp_core::Odo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arp_core::Odo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.odo_left);
    stream.next(m.odo_right);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Odo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arp_core::Odo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arp_core::Odo_<ContainerAllocator> & v) 
  {
    s << indent << "odo_left: ";
    Printer<double>::stream(s, indent + "  ", v.odo_left);
    s << indent << "odo_right: ";
    Printer<double>::stream(s, indent + "  ", v.odo_right);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARP_CORE_MESSAGE_ODO_H

